#!/usr/bin/env bash

# -------- HELP --------
show_help() {
  echo "DESCRIPTION"
  echo "kite [module] [options]"
  echo ""
  echo "Modules:"
  echo "  kcount     Run k-mer counting"
  echo "  kfilter    Run k-mer filtering"
  echo "  kml        Run k-mer ML methods"
  echo "  pipeline   Run full pipeline (kcount + kfilter + kml)"
  echo ""
  echo "Options:"
  echo "  -i    input file"
  echo "  -p    selection threshold [0.4â€“0.7]"
  echo "  -t    number of threads"
  echo "  -d    directory with fastq samples"
  exit 0
}

# -------- Parse module --------
module=$1
shift   # shift removes the first argument (the module)

# Defaults
threads=4
separator=$' '
threshold=0.5

# -------- Parse options --------
while getopts i:t:p:d:s: flag
do
    case "${flag}" in
      i) input=${OPTARG};;
      t) threads=${OPTARG};;
      p) threshold=${OPTARG};;
      d) directory=${OPTARG};;
      s) separator=${OPTARG};;
    esac
done

# -------- Functions --------
kcount() {
  local input=$1
  local threads=$2
  local directory=$3
  echo ">>> Running kCount..."

  # Create output directory if it doesn't exist
  mkdir -p output

  # Run the R script to create samples
  Rscript src/create_samples.R "$input" "$directory"

  # Calculate recurrence-min parameter for kmtricks
  x=$(ls $directory | wc -l)
  y=$((x / 2))
  y=$(( (y * 5) / 100 ))
  if [[ $y < 3 ]]; then y=3; fi

  # Run kmtricks pipeline
  kmtricks pipeline --file samples --run-dir temp --kmer-size 31 -t "$threads" \
    --hard-min 4 --soft-min 4 --recurrence-min "$y" --focus 0 --mode kmer:count:bin --cpr --until merge

  # Aggregate kmtricks output into a matrix
  kmtricks aggregate --run-dir temp --matrix kmer --cpr-in --format text --sorted -t "$threads" > output/matrix.tsv


  awk -F":" '{print $1}' samples > output/samples_name.tsv # Prepare the header for the matrix
  awk '{printf "%s%s", sep, $1; sep=" "} END {print ""}' output/samples_name.tsv > output/testfile.tmp # Convert rows to a single line separated by space
  mv output/testfile.tmp output/samples_name.tsv
  sed -i '1s/^/tag /' output/samples_name.tsv # Add "tag" at the beginning of the header
  sed -i -e '$a\' output/samples_name.tsv # Ensure newline at the end of the file
  sed -i -e '1e cat output/samples_name.tsv' output/matrix.tsv # Insert header into matrix.tsv
  # Clean up temporary files
  rm -r temp/ samples output/samples_name.tsv

  echo "kCount completed!"
}

kfilter() {
  local input_file=$1        # input of get_conditions.R
  local matrix_input=$2      # matriz (opcional)
  local threads=$3
  local separator=$4
  local threshold=$5

  echo ">>> Running kFilter..."

  # Set default matrix input if not provided
  if [ -z "$matrix_input" ]; then
    matrix_input="output/matrix.tsv"
  fi

  Rscript src/get_conditions.R "$input_file"

  # Validate threshold
  if (( $(echo "$threshold < 0.4" | bc -l) )) || (( $(echo "$threshold > 0.7" | bc -l) )); then
      echo "Error: threshold must be between 0.4 and 0.7"
      exit 1
  fi

  # Running kSelection
  ./src/kSelection -i "$matrix_input" -t "$threads" -s "$separator" -p "$threshold"

  # Running comp_qvalue
  ./src/comp_qvalue

  # Clean up
  rm -f pvalue.tsv output_pv.tsv stats.txt

  mkdir -p output
  mv qvalue.tsv output/
  mv matrix_kf.tsv output/
  rm samples_cond

  echo "kFilter completed!"
}

kml() {
    local input_file=$1
    local threads=$2

    echo ">>> Running kML..."

    if [[ "$threads" =~ ^[0-9]+$ ]]; then
        threads=$((threads + 0))
    else
      echo "Warning: invalid number of threads ($threads), using default = 4"
        threads=4
    fi

    mkdir -p output
    n_kmers=$(wc -l < output/matrix_kf.tsv)
    n_kmers=$((n_kmers - 1))

    if [[ $n_kmers -lt 200001 ]]; then
      if [[ $n_kmers -lt 10 ]]; then
          echo "Not enough k-mers to train ML models."
          echo "$n_kmers k-mers found."
          exit 1
      fi

      Rscript src/putting_classes.R "$input_file"
      #rm samples
      chmod +x src/xgb.py
      chmod +x src/xai.py
      OMP_NUM_THREADS=$threads ./src/xgb.py
      ./src/xai.py
      #rm train_data.csv

  else
      echo "Too many k-mers to train ML models."
      echo "$n_kmers k-mers found."
      echo "Try to increase the threshold in k-filter."
  fi


    echo "kML completed!"
}


pipeline() {
  local input=$1
  local threads=$2
  local directory=$3
  local separator=$4
  local threshold=$5
  echo ">>> Running full pipeline..."
  kcount "$input" "$threads" "$directory"
  kfilter "$input" "" "$threads" "$separator" "$threshold"
  kml "$input" "$threads"
  echo "Pipeline completed!"
}

# -------- Dispatcher --------
case "$module" in
  kcount)
    kcount "$input" "$threads" "$directory"
    ;;
  kfilter)
    kfilter "$input" "" "$threads" "$separator" "$threshold"
    ;;
  kml)
    kml "$input" "$threads"
    ;;
  pipeline)
    pipeline "$input" "$threads" "$directory" "$separator" "$threshold"
    ;;
  -h|--help|"")
    show_help
    ;;
  *)
    echo "Error: Unknown module '$module'"
    show_help
    ;;
esac
